// ===============================================
// lib/src/navigation/navigation_handler.dart
// ===============================================
//
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ navigation logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mini apps
// ‡πÇ‡∏î‡∏¢‡∏°‡∏µ abstract class ‡πÅ‡∏•‡∏∞ implementation ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
// ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á modules ‡∏û‡∏£‡πâ‡∏≠‡∏° error handling ‡πÅ‡∏•‡∏∞ debugging features
// ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á mini app ‡∏Å‡∏±‡∏ö host navigation service

import 'package:flutter/material.dart';
import 'host_navigator_provider.dart';

// ============================================
// Abstract Navigation Handler Interface
// ============================================

/// Abstract navigation handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mini apps
///
/// Interface ‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà navigation handler
/// ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ navigation
///
/// ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô abstract class ‡∏ó‡∏≥‡πÉ‡∏´‡πâ:
/// 1. ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á custom handler ‡πÑ‡∏î‡πâ
/// 2. ‡∏°‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö
/// 3. ‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£ test ‡πÅ‡∏•‡∏∞ mock
abstract class MiniAppNavigationHandler {
  /// Module ID ‡∏ó‡∏µ‡πà unique ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏∏ mini app
  ///
  /// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
  /// - ‡∏£‡∏∞‡∏ö‡∏∏ target module ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ navigate
  /// - Logging ‡πÅ‡∏•‡∏∞ debugging
  /// - ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ routing
  String get moduleId;

  /// ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô
  ///
  /// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
  /// - ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô error messages
  /// - UI labels ‡πÅ‡∏•‡∏∞ titles
  /// - User feedback
  String get displayName;

  /// Method ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ navigation ‡πÑ‡∏õ‡∏¢‡∏±‡∏á mini app
  ///
  /// Parameters:
  /// - [context]: BuildContext ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á widget tree
  /// - [targetRoute]: Route ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô mini app ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏õ (optional)
  /// - [extraData]: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á (optional)
  /// - [onPressed]: Callback ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Å‡πà‡∏≠‡∏ô navigation (optional)
  ///
  /// ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
  /// 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å onPressed callback (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  /// 2. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• navigation
  /// 3. ‡∏´‡∏≤ navigation service ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ navigate
  /// 4. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ñ‡πâ‡∏≤ navigation ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
  void navigateToMiniApp({
    required BuildContext context,
    String? targetRoute,
    Map<String, dynamic>? extraData,
    VoidCallback? onPressed,
  });
}

// ============================================
// Base Implementation
// ============================================

/// Implementation ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á navigation handler
///
/// ‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ implement logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
/// 1. ‡∏Å‡∏≤‡∏£‡∏´‡∏≤ navigation service ‡∏à‡∏≤‡∏Å context
/// 2. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö navigation
/// 3. Error handling ‡πÅ‡∏•‡∏∞ user feedback
/// 4. Debugging ‡πÅ‡∏•‡∏∞ logging
///
/// ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏´‡∏£‡∏∑‡∏≠ extend ‡πÄ‡∏û‡∏∑‡πà‡∏≠ customize behavior
class BaseMiniAppNavigationHandler implements MiniAppNavigationHandler {
  @override
  final String moduleId;

  @override
  final String displayName;

  /// Constructor
  ///
  /// Parameters:
  /// - [moduleId]: ID ‡∏Ç‡∏≠‡∏á module ‡∏ó‡∏µ‡πà‡∏à‡∏∞ navigate ‡πÑ‡∏õ
  /// - [displayName]: ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ error
  const BaseMiniAppNavigationHandler({required this.moduleId, required this.displayName});

  /// Implementation ‡∏Ç‡∏≠‡∏á navigation method ‡∏´‡∏•‡∏±‡∏Å
  ///
  /// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
  /// 1. Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging
  /// 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å onPressed callback (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  /// 3. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• navigation
  /// 4. ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤ host navigation service
  /// 5. ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ navigate ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error
  @override
  void navigateToMiniApp({
    required BuildContext context,
    String? targetRoute,
    Map<String, dynamic>? extraData,
    VoidCallback? onPressed,
  }) {
    // Debug logging - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ navigate
    debugPrint('üéØ BaseMiniAppNavigationHandler.navigateToMiniApp called');
    debugPrint('   Module ID: $moduleId');
    debugPrint('   Target route: $targetRoute');
    debugPrint('   Extra data: $extraData');

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏Å‡πà‡∏≠‡∏ô navigation (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö analytics, state update, ‡∏´‡∏£‡∏∑‡∏≠ side effects ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    onPressed?.call();

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö navigation
    // ‡∏£‡∏ß‡∏° metadata, route, ‡πÅ‡∏•‡∏∞ extra data
    final navigationData = _prepareNavigationData(targetRoute, extraData);

    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤ navigation service ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ navigate
    _notifyHostApp(context, navigationData);
  }

  /// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö navigation
  ///
  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö navigation
  /// ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tracking ‡πÅ‡∏•‡∏∞ debugging
  ///
  /// Parameters:
  /// - [targetRoute]: Route ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô module
  /// - [extraData]: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  ///
  /// Returns:
  /// Map ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• navigation ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Map<String, dynamic> _prepareNavigationData(String? targetRoute, Map<String, dynamic>? extraData) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á base data ‡∏û‡∏£‡πâ‡∏≠‡∏° metadata
    final data = <String, dynamic>{
      'moduleId': moduleId, // ‡∏£‡∏∞‡∏ö‡∏∏ target module
      'source': 'mini_app_shortcut', // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á navigation
      'timestamp': DateTime.now().toIso8601String(), // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà navigate
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° route ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏
    if (targetRoute != null) {
      data['route'] = targetRoute; // Route ‡∏´‡∏•‡∏±‡∏Å
      data['initialRoute'] = targetRoute; // Initial route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö compatibility
    }

    // ‡∏£‡∏ß‡∏° extra data ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    // ‡πÉ‡∏ä‡πâ addAll ‡πÄ‡∏û‡∏∑‡πà‡∏≠ merge data
    if (extraData != null) {
      data.addAll(extraData);
    }

    debugPrint('üì¶ Navigation data prepared: $data');
    return data;
  }

  /// ‡πÅ‡∏à‡πâ‡∏á host app ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ navigate
  ///
  /// ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤ navigation service ‡∏à‡∏≤‡∏Å context
  /// ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ service ‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ navigate
  ///
  /// ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:
  /// 1. ‡∏´‡∏≤‡∏à‡∏≤‡∏Å context ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  /// 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô widget tree
  /// 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
  void _notifyHostApp(BuildContext context, Map<String, dynamic> data) {
    debugPrint('üîç Looking for HostNavigatorProvider in context...');

    try {
      // Method 1: ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤ navigation service ‡∏à‡∏≤‡∏Å context ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      // ‡πÉ‡∏ä‡πâ InheritedWidget pattern
      final hostNavigator = HostNavigatorProvider.of(context);

      if (hostNavigator != null) {
        // ‡∏û‡∏ö service - ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ navigate
        debugPrint('‚úÖ HostNavigatorProvider found, delegating navigation');
        hostNavigator.navigateToModule(moduleId, data);
        return;
      } else {
        // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô immediate context
        debugPrint('‚ö†Ô∏è HostNavigatorProvider not found in immediate context');

        // Method 2: ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô widget tree
        // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤
        if (_tryFindProviderInTree(context, data)) {
          return; // ‡∏û‡∏ö‡πÅ‡∏•‡∏∞ navigate ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        }
      }

      // Method 3: ‡πÑ‡∏°‡πà‡∏û‡∏ö service - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error
      _handleNavigationFailure(context, data);
    } catch (e) {
      // ‡∏à‡∏±‡∏ö error ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô crash
      debugPrint('‚ùå Navigation error: $e');
      _handleNavigationFailure(context, data);
    }
  }

  /// ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ provider ‡πÉ‡∏ô widget tree
  ///
  /// ‡πÄ‡∏î‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡πÉ‡∏ô widget tree ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ HostNavigatorProvider
  /// ‡∏°‡∏µ depth limit ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô infinite loop
  ///
  /// Parameters:
  /// - [context]: Starting context
  /// - [data]: Navigation data
  ///
  /// Returns:
  /// true ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡πÅ‡∏•‡∏∞ navigate ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
  bool _tryFindProviderInTree(BuildContext context, Map<String, dynamic> data) {
    debugPrint('üîç Trying to find provider in widget tree...');

    try {
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å context ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      BuildContext? currentContext = context;
      int depth = 0;
      const maxDepth = 10; // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô infinite loop

      // ‡πÄ‡∏î‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡πÉ‡∏ô tree ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏û‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏∂‡∏á limit
      while (currentContext != null && depth < maxDepth) {
        // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤ HostNavigatorProvider
        final provider = currentContext.dependOnInheritedWidgetOfExactType<HostNavigatorProvider>();
        if (provider != null) {
          // ‡∏û‡∏ö provider - ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ navigate
          debugPrint('‚úÖ Found HostNavigatorProvider at depth $depth');
          provider.navigationService.navigateToModule(moduleId, data);
          return true;
        }

        // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤ parent context
        // ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ç‡πâ‡∏≤‡∏° Navigator boundary
        try {
          currentContext = currentContext.widget is! Navigator
              ? currentContext.findAncestorWidgetOfExactType<MaterialApp>()?.createState().context
              : null;
        } catch (e) {
          debugPrint('‚ö†Ô∏è Could not get parent context: $e');
          break;
        }

        depth++;
      }

      debugPrint('‚ùå Provider not found in widget tree (searched $depth levels)');
      return false;
    } catch (e) {
      debugPrint('‚ùå Error searching widget tree: $e');
      return false;
    }
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ navigation ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
  ///
  /// ‡πÅ‡∏™‡∏î‡∏á error message ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô
  /// ‡πÅ‡∏•‡∏∞ log debug information
  void _handleNavigationFailure(BuildContext context, Map<String, dynamic> data) {
    debugPrint('‚ùå Navigation failed - no valid navigation method found');
    debugPrint('üìã Failed navigation data: $data');

    // ‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô (‡∏ñ‡πâ‡∏≤ context ‡∏¢‡∏±‡∏á mounted)
    if (context.mounted) {
      _showNavigationError(context);
    }

    // Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    _logDebugInfo(context);
  }

  /// ‡πÅ‡∏™‡∏î‡∏á error message ‡∏ú‡πà‡∏≤‡∏ô SnackBar
  ///
  /// ‡πÅ‡∏™‡∏î‡∏á SnackBar ‡∏û‡∏£‡πâ‡∏≠‡∏°:
  /// - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
  /// - ‡∏õ‡∏∏‡πà‡∏° Debug ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  /// - ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô error
  void _showNavigationError(BuildContext context) {
    try {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Unable to open $displayName'),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 3),
          action: SnackBarAction(label: 'Debug', textColor: Colors.white, onPressed: () => _showDebugDialog(context)),
        ),
      );
    } catch (e) {
      // ‡∏à‡∏±‡∏ö error ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ ScaffoldMessenger
      debugPrint('‚ùå Could not show error SnackBar: $e');
    }
  }

  /// ‡πÅ‡∏™‡∏î‡∏á debug dialog ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î error
  ///
  /// Dialog ‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á:
  /// - Module information
  /// - ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  /// - Technical details
  void _showDebugDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Navigation Debug'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• module
            Text('Module ID: $moduleId'),
            Text('Display Name: $displayName'),
            const SizedBox(height: 8),

            // ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ
            const Text(
              'The navigation service is not properly configured. '
              'Make sure HostNavigatorProvider is available in the widget tree.',
              style: TextStyle(fontSize: 12),
            ),
          ],
        ),
        actions: [TextButton(onPressed: () => Navigator.of(context).pop(), child: const Text('OK'))],
      ),
    );
  }

  /// Log debug information ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö troubleshooting
  ///
  /// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• context ‡πÅ‡∏•‡∏∞ widget tree
  /// ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ debug ‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏° navigation ‡∏ñ‡∏∂‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
  void _logDebugInfo(BuildContext context) {
    debugPrint('üìã Navigation Debug Info:');
    debugPrint('   Widget: ${context.widget.runtimeType}');
    debugPrint('   Mounted: ${context.mounted}');
    debugPrint('   Has Scaffold: ${Scaffold.maybeOf(context) != null}');
    debugPrint('   Has Navigator: ${Navigator.maybeOf(context) != null}');
    debugPrint('   Has Material App: ${context.findAncestorWidgetOfExactType<MaterialApp>() != null}');
  }
}

// ============================================
// ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Navigation Handler
// ============================================
//
// 1. **‡∏™‡∏£‡πâ‡∏≤‡∏á Handler Instance:**
//    ```dart
//    final handler = BaseMiniAppNavigationHandler(
//      moduleId: 'payment_module',
//      displayName: 'Payment',
//    );
//    ```
//
// 2. **‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Widget (‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏∏‡πà‡∏°):**
//    ```dart
//    ElevatedButton(
//      onPressed: () {
//        handler.navigateToMiniApp(
//          context: context,
//          targetRoute: '/checkout',
//          extraData: {'orderId': '12345'},
//          onPressed: () => analytics.track('payment_clicked'),
//        );
//      },
//      child: Text('Go to Payment'),
//    )
//    ```
//
// 3. **‡∏™‡∏£‡πâ‡∏≤‡∏á Custom Handler:**
//    ```dart
//    class CustomNavigationHandler extends BaseMiniAppNavigationHandler {
//      CustomNavigationHandler() : super(
//        moduleId: 'custom',
//        displayName: 'Custom Module',
//      );
//
//      @override
//      void navigateToMiniApp({...}) {
//        // Custom logic
//        super.navigateToMiniApp(...);
//      }
//    }
//    ```
//
// Handler ‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ navigation logic ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// ‡∏û‡∏£‡πâ‡∏≠‡∏° error handling ‡πÅ‡∏•‡∏∞ debugging features
// ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£ navigate ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á modules ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏ö‡∏£‡∏∑‡πà‡∏ô
