// ===============================================
// lib/src/pages/initializable_page_interface.dart
// ===============================================
//
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î interfaces ‡πÅ‡∏•‡∏∞ mixins ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
// initialization callbacks ‡πÅ‡∏•‡∏∞ configuration management
// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£ setup ‡∏´‡∏£‡∏∑‡∏≠ loading ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
// ‡πÄ‡∏ä‡πà‡∏ô splash screens, loading pages, ‡∏´‡∏£‡∏∑‡∏≠ pages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á fetch data

import 'dart:async';

import 'package:flutter/material.dart';

// ============================================
// Abstract Interfaces
// ============================================

/// Generic interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ initialization callback
///
/// Interface ‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
/// 1. ‡πÅ‡∏à‡πâ‡∏á host/parent ‡πÄ‡∏°‡∏∑‡πà‡∏≠ initialization ‡πÄ‡∏™‡∏£‡πá‡∏à
/// 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° callback
///
/// Use cases:
/// - Splash screens ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ animation ‡πÄ‡∏™‡∏£‡πá‡∏à
/// - Loading pages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ data ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
/// - Setup pages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ configuration ‡πÄ‡∏™‡∏£‡πá‡∏à
///
/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ implement:
/// ```dart
/// class MySplashPage implements InitializablePage {
///   final VoidCallback? onInitialized;
///
///   MySplashPage({this.onInitialized});
///
///   @override
///   Widget createWithInitializationCallback(VoidCallback onInitialized) {
///     return MySplashPage(onInitialized: onInitialized);
///   }
/// }
/// ```
abstract class InitializablePage {
  /// Callback ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ page initialization ‡πÄ‡∏™‡∏£‡πá‡∏à
  ///
  /// Callback ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
  /// - ‡πÅ‡∏à‡πâ‡∏á parent/host ‡∏ß‡πà‡∏≤ page ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß
  /// - Trigger ‡∏Å‡∏≤‡∏£ navigate ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  /// - Update state ‡∏Ç‡∏≠‡∏á parent widget
  ///
  /// ‡πÄ‡∏õ‡πá‡∏ô nullable ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ page ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
  /// ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ callback (standalone mode)
  VoidCallback? get onInitialized;

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á page instance ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° initialization callback
  ///
  /// Method ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á page instance ‡πÉ‡∏´‡∏°‡πà
  /// ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á callback ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô constructor
  ///
  /// Parameters:
  /// - [onInitialized]: Callback ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ initialization ‡πÄ‡∏™‡∏£‡πá‡∏à
  ///
  /// Returns:
  /// Widget instance ‡∏Ç‡∏≠‡∏á page ‡∏û‡∏£‡πâ‡∏≠‡∏° callback
  ///
  /// Pattern ‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ:
  /// - Parent ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ inject callback ‡πÑ‡∏î‡πâ
  /// - Page ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö standalone ‡πÑ‡∏î‡πâ
  /// - ‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£ test
  Widget createWithInitializationCallback(VoidCallback onInitialized);
}

/// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ configure ‡πÑ‡∏î‡πâ
///
/// Interface ‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
/// 1. ‡∏£‡∏±‡∏ö configuration ‡∏à‡∏≤‡∏Å host/parent
/// 2. ‡∏£‡∏±‡∏ö event callbacks ‡∏à‡∏≤‡∏Å host
///
/// Use cases:
/// - Pages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ theme configuration
/// - Pages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ user data
/// - Pages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ communicate ‡∏Å‡∏±‡∏ö host
///
/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ implement:
/// ```dart
/// class MyConfigurablePage implements ConfigurablePage {
///   @override
///   final PageConfig config;
///
///   @override
///   final Function(String, dynamic)? onHostEvent;
///
///   MyConfigurablePage({
///     required this.config,
///     this.onHostEvent,
///   });
/// }
/// ```
abstract class ConfigurablePage {
  /// Configuration object ‡∏Ç‡∏≠‡∏á page
  ///
  /// ‡πÉ‡∏ä‡πâ dynamic type ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
  /// ‡πÅ‡∏ï‡πà‡∏•‡∏∞ page ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏´‡∏ô‡∏î config type ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ
  ///
  /// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á config types:
  /// - Map<String, dynamic> ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö flexible config
  /// - Custom class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö type-safe config
  /// - String/int ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö simple config
  ///
  /// Config ‡∏≠‡∏≤‡∏à‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢:
  /// - Theme settings
  /// - User preferences
  /// - API endpoints
  /// - Feature flags
  get config;

  /// Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö events ‡∏à‡∏≤‡∏Å host
  ///
  /// ‡πÉ‡∏ä‡πâ dynamic type ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  /// function signature ‡∏ï‡∏≤‡∏° use case
  ///
  /// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á signatures:
  /// - void Function(String event, Map data)
  /// - void Function(HostEvent event)
  /// - Stream<Event> get eventStream
  ///
  /// Events ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:
  /// - Navigation events
  /// - Data updates
  /// - State changes
  /// - User actions
  get onHostEvent;
}

/// Interface ‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page ‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á initializable ‡πÅ‡∏•‡∏∞ configurable
///
/// Interface ‡∏ô‡∏µ‡πâ‡∏£‡∏ß‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á:
/// - InitializablePage: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ initialization callbacks
/// - ConfigurablePage: ‡∏£‡∏±‡∏ö configuration ‡πÅ‡∏•‡∏∞ events
///
/// ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pages ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏ã‡∏∂‡πà‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á:
/// 1. Configuration ‡∏à‡∏≤‡∏Å host
/// 2. Initialization callbacks
/// 3. Event communication
///
/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ:
/// ```dart
/// class MyComplexPage extends StatefulWidget implements MiniAppPageBase {
///   @override
///   final VoidCallback? onInitialized;
///
///   @override
///   final PageConfig config;
///
///   @override
///   final Function(String, dynamic)? onHostEvent;
///
///   MyComplexPage({
///     this.onInitialized,
///     required this.config,
///     this.onHostEvent,
///   });
///
///   @override
///   Widget createWithInitializationCallback(VoidCallback onInitialized) {
///     return MyComplexPage(
///       onInitialized: onInitialized,
///       config: config,
///       onHostEvent: onHostEvent,
///     );
///   }
/// }
/// ```
abstract class MiniAppPageBase implements InitializablePage, ConfigurablePage {}

// ============================================
// Mixins for Common Behaviors
// ============================================

/// Mixin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ initialization handling
///
/// Mixin ‡∏ô‡∏µ‡πâ provide method ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
/// initialization callback ‡∏û‡∏£‡πâ‡∏≠‡∏° delay ‡πÅ‡∏•‡∏∞ logging
///
/// Features:
/// - Configurable delay
/// - Automatic callback execution
/// - Debug logging
/// - Post-frame callback handling
///
/// ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
/// ```dart
/// class MySplashPageState extends State<MySplashPage>
///     with PageInitializationMixin {
///
///   @override
///   void initState() {
///     super.initState();
///     handlePageInitialization(
///       onInitialized: widget.onInitialized,
///       initializationDelay: Duration(seconds: 2),
///       pageName: 'Splash Screen',
///     );
///   }
/// }
/// ```
mixin PageInitializationMixin {
  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ page initialization ‡∏û‡∏£‡πâ‡∏≠‡∏° callback
  ///
  /// Method ‡∏ô‡∏µ‡πâ‡∏à‡∏∞:
  /// 1. ‡∏£‡∏≠‡πÉ‡∏´‡πâ frame ‡πÅ‡∏£‡∏Å‡∏ñ‡∏π‡∏Å render (post-frame callback)
  /// 2. Delay ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö animation/loading)
  /// 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å initialization callback
  /// 4. Log ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging
  ///
  /// Parameters:
  /// - [onInitialized]: Callback ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ initialization ‡πÄ‡∏™‡∏£‡πá‡∏à (nullable)
  /// - [initializationDelay]: ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ delay ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback (default: 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
  /// - [pageName]: ‡∏ä‡∏∑‡πà‡∏≠ page ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logging (optional)
  ///
  /// ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
  /// 1. ‡πÉ‡∏ä‡πâ addPostFrameCallback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÉ‡∏´‡πâ UI render ‡πÄ‡∏™‡∏£‡πá‡∏à
  /// 2. Delay ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ animations/loading ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  /// 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡πÅ‡∏•‡∏∞ log
  ///
  /// Use cases:
  /// - Splash screens ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á animation
  /// - Loading screens ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á progress
  /// - Setup screens ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á initialize resources
  void handlePageInitialization({
    required VoidCallback? onInitialized,
    Duration initializationDelay = const Duration(milliseconds: 1500),
    String? pageName,
  }) {
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ frame ‡πÅ‡∏£‡∏Å‡∏ñ‡∏π‡∏Å render ‡πÄ‡∏™‡∏£‡πá‡∏à
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏Å‡πà‡∏≠‡∏ô UI ‡∏û‡∏£‡πâ‡∏≠‡∏°
    WidgetsBinding.instance.addPostFrameCallback((_) {
      // Delay ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
      // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö animations ‡∏´‡∏£‡∏∑‡∏≠ minimum display time
      Future.delayed(initializationDelay, () {
        // Log ‡∏Å‡∏≤‡∏£ initialization ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        debugPrint('üéâ ${pageName ?? "Page"} initialization completed');

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        // ‡πÉ‡∏ä‡πâ ?. operator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ null case
        onInitialized?.call();
      });
    });
  }
}

/// Mixin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö loading pages (splash, loading screens, etc.)
///
/// Mixin ‡∏ô‡∏µ‡πâ provide method ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
/// loading state ‡∏û‡∏£‡πâ‡∏≠‡∏° progress updates
///
/// Features:
/// - Simulated progress updates
/// - Configurable loading duration
/// - Progress callbacks
/// - Loading message support
///
/// ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
/// ```dart
/// class MyLoadingPageState extends State<MyLoadingPage>
///     with LoadingPageMixin {
///
///   double _progress = 0;
///
///   @override
///   void initState() {
///     super.initState();
///     handleLoadingState(
///       onLoadingComplete: () => Navigator.pushReplacement(...),
///       loadingDuration: Duration(seconds: 3),
///       loadingMessage: 'Loading resources...',
///       onProgressUpdate: () {
///         setState(() {
///           _progress += 0.25;
///         });
///       },
///     );
///   }
/// }
/// ```
mixin LoadingPageMixin {
  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ loading state ‡∏û‡∏£‡πâ‡∏≠‡∏° progress updates
  ///
  /// Method ‡∏ô‡∏µ‡πâ‡∏à‡∏∞:
  /// 1. Simulate loading progress
  /// 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å progress callbacks ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞
  /// 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å completion callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à
  /// 4. Log loading states
  ///
  /// Parameters:
  /// - [onLoadingComplete]: Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ loading ‡πÄ‡∏™‡∏£‡πá‡∏à (nullable)
  /// - [loadingDuration]: ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ loading ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (default: 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
  /// - [loadingMessage]: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á loading (optional)
  /// - [onProgressUpdate]: Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö update progress (optional)
  ///
  /// ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
  /// 1. ‡πÅ‡∏ö‡πà‡∏á loading duration ‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏ä‡πà‡∏ß‡∏á (25% each)
  /// 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å onProgressUpdate ‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á
  /// 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å onLoadingComplete ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö 100%
  ///
  /// Progress simulation:
  /// - 0% ‚Üí 25% ‚Üí 50% ‚Üí 75% ‚Üí 100%
  /// - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback 4 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  /// - ‡∏à‡∏ö‡∏ó‡∏µ‡πà completion callback
  void handleLoadingState({
    required VoidCallback? onLoadingComplete,
    Duration loadingDuration = const Duration(milliseconds: 2000),
    String? loadingMessage,
    VoidCallback? onProgressUpdate,
  }) {
    // Log ‡πÄ‡∏£‡∏¥‡πà‡∏° loading
    debugPrint('üîÑ Loading started: ${loadingMessage ?? "Initializing..."}');

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ frame ‡πÅ‡∏£‡∏Å render ‡πÄ‡∏™‡∏£‡πá‡∏à
    WidgetsBinding.instance.addPostFrameCallback((_) {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì interval ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö progress updates
      // ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô (25% each)
      final progressInterval = loadingDuration.inMilliseconds ~/ 4;

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö simulate progress
      Timer.periodic(Duration(milliseconds: progressInterval), (timer) {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å progress update callback
        // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö update UI (progress bar, percentage, etc.)
        onProgressUpdate?.call();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏ö 4 ticks (100%) ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if (timer.tick >= 4) {
          // ‡∏´‡∏¢‡∏∏‡∏î timer
          timer.cancel();

          // Log loading ‡πÄ‡∏™‡∏£‡πá‡∏à
          debugPrint('‚úÖ Loading completed');

          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å completion callback
          onLoadingComplete?.call();
        }
      });
    });
  }
}

// ============================================
// ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Page Interfaces ‡πÅ‡∏•‡∏∞ Mixins
// ============================================
//
// **1. Simple Initializable Page:**
// ```dart
// class SimplePage extends StatefulWidget implements InitializablePage {
//   @override
//   final VoidCallback? onInitialized;
//   
//   SimplePage({this.onInitialized});
//   
//   @override
//   Widget createWithInitializationCallback(VoidCallback onInitialized) {
//     return SimplePage(onInitialized: onInitialized);
//   }
// }
// ```
//
// **2. Page with Initialization Mixin:**
// ```dart
// class SplashPageState extends State<SplashPage> 
//     with PageInitializationMixin {
//   
//   @override
//   void initState() {
//     super.initState();
//     handlePageInitialization(
//       onInitialized: widget.onInitialized,
//       pageName: 'Splash',
//     );
//   }
// }
// ```
//
// **3. Loading Page with Progress:**
// ```dart
// class LoadingPageState extends State<LoadingPage> 
//     with LoadingPageMixin {
//   
//   double progress = 0;
//   
//   @override
//   void initState() {
//     super.initState();
//     handleLoadingState(
//       onLoadingComplete: () => navigateToHome(),
//       onProgressUpdate: () {
//         setState(() => progress += 0.25);
//       },
//     );
//   }
// }
// ```
//
// Interfaces ‡πÅ‡∏•‡∏∞ Mixins ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á
// pages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ initialization ‡πÅ‡∏•‡∏∞ loading
// ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡∏∞ reusable