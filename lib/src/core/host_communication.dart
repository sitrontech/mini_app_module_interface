// ===============================================
// lib/src/core/host_communication.dart
// A static service that facilitates event-based communication between the module and the host application.
// It acts as the central nervous system for inter-app communication
// ===============================================

import 'package:flutter/foundation.dart';

/// Communication service between module and host app
class HostCommunicationService {
  static void Function(String, Map<String, dynamic>)? _eventHandler;
  static bool _isInitialized = false;
  static String? _moduleId;

  /// Initialize the communication service
  /// ‡πÉ‡∏ô‡πÄ‡∏°‡∏ò‡∏≠‡∏î onModuleInit() ‡∏Ç‡∏≠‡∏á MiniAppModuleBase ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ HostCommunicationService.initialize()
  /// ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á moduleId ‡πÅ‡∏•‡∏∞ onHostEvent callback ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
  static void initialize({required String moduleId, void Function(String, Map<String, dynamic>)? onEvent}) {
    _moduleId = moduleId;
    _eventHandler = onEvent;
    _isInitialized = true;

    if (kDebugMode) {
      print('üîå HostCommunicationService initialized for module: $moduleId');
    }
  }

  /// Send communication to host application
  /// ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÇ‡∏î‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏´‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏°‡∏î‡πâ‡∏ß‡∏¢ moduleId ‡πÅ‡∏•‡∏∞ timestamp
  static void sendEvent(String communicationType, [Map<String, dynamic>? data]) {
    if (!_isInitialized || _eventHandler == null) {
      if (kDebugMode) {
        print('‚ö†Ô∏è HostCommunicationService not initialized');
      }
      return;
    }

    final communicationData = {'moduleId': _moduleId, 'timestamp': DateTime.now().toIso8601String(), ...?data};

    if (kDebugMode) {
      print('üì§ Sending event: $communicationType from $_moduleId');
    }

    _eventHandler!(communicationType, communicationData);
  }

  /// Predefined communication methods
  /// ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏≠‡∏∑‡πà‡∏ô
  static void requestNavigation(String route, [Map<String, dynamic>? params]) {
    sendEvent(CommunicationType.navigationRequest, {'route': route, 'params': params ?? {}});
  }

  /// ‡∏Ç‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏π‡∏•
  static void requestClose([String? reason]) {
    sendEvent(CommunicationType.closeRequest, {'reason': reason ?? 'user_action'});
  }

  static void requestLogout([String? reason]) {
    sendEvent(CommunicationType.logoutRequest, {'reason': reason ?? 'user_action'});
  }

  /// ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•
  static void reportError(String error, [String? context, StackTrace? stackTrace]) {
    sendEvent(CommunicationType.errorReport, {
      'error': error,
      'context': context,
      'stackTrace': stackTrace?.toString(),
    });
  }

  /// ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
  static void requestData(String dataType, [Map<String, dynamic>? params]) {
    sendEvent(CommunicationType.dataRequest, {'dataType': dataType, 'params': params ?? {}});
  }

  /// ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏•
  static void notifyStateChange(Map<String, dynamic> state) {
    sendEvent(CommunicationType.stateChanged, state);
  }

  /// ‡∏™‡πà‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á ‡∏ã‡∏∂‡πà‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
  static void sendCustomEvent(String eventType, Map<String, dynamic> data) {
    sendEvent(eventType, data);
  }

  /// Cleanup
  static void dispose() {
    _eventHandler = null;
    _isInitialized = false;
    _moduleId = null;
  }
}

// ‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£ ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏• (mini-app) ‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å (host app) ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
// ‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πÑ‡∏Å‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡∏™‡πà‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå (event) ‡πÅ‡∏•‡∏∞ ‡∏Ñ‡∏≥‡∏Ç‡∏≠ (request) ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ

/// Communication types
class CommunicationType {
  static const String navigationRequest = 'navigation.request';
  static const String closeRequest = 'module.close_request';
  static const String logoutRequest = 'auth.logout_request';
  static const String errorReport = 'error.report';
  static const String dataRequest = 'data.request';
  static const String stateChanged = 'state.changed';
  static const String ready = 'module.ready';
  static const String disposed = 'module.disposed';
}
